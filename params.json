{"name":"Streamflow","tagline":"","body":"##Welcome!\r\n\r\nStreamFlow&trade; is a stream processing tool designed to help build and monitor processing \r\nworkflows.  The ultimate goal of StreamFlow is to make working with stream processing frameworks \r\nsuch as Apache Storm easier, faster, and with \"enterprise\" like management functionality.  \r\nStreamFlow also provides a mechanism for non-developers such as data scientists, analysts, or \r\noperational users to rapidly build scalable data flows and analytics.\r\n\r\nStreamFlow provides the following capabilites: \r\n\r\n1. A **responsive web interface** for building and monitoring Storm topologies.\r\n2. An interactive **drag and drop topology builder** for authoring new topologies\r\n3. A **dashboard** for monitoring the status and performance of topologies as well as viewing aggregated topology logs.\r\n4. A speciaized **topology engine** which solves some Storm complexities such as ClassLoader isolation and serialization and provides a mechanism for dependency injection.\r\n5. A **modular framework** for publishing and organizing new capabilities in the form of Spouts and Bolts.\r\n\r\n\r\n## How it works\r\n\r\nThe following is a simple depiction of the StreamFlow stack. The web interface is built using open \r\nsource web frameworks and is backed by a series of reusable web services. StreamFlow is capable of \r\nauthoring and managing topologies dynamically using a series of reusable Frameworks.  These \r\nFrameworks are simply JAR files comprised of standard Storm Spouts and Bolts with a metadata \r\nconfiguration file which exposes the frameworks.  StreamFlow utilizes a custom topology driver \r\nwhich is used to bootstrap and execute a topology along with StreamFlow specific configuration logic.\r\n\r\n\r\n## Concepts\r\n\r\nThe following is a description of some core StreamFlow concepts and terminology.\r\n\r\n##### Component\r\nA component is either Storm Spout or a Storm Bolt\r\n\r\n##### Framework\r\nA grouping of related *Components* and their associated metadata. Ideally elements of a framework \r\nshould all be compatible when wired together on a topology as they share the same protocol. \r\nFrameworks might be organized around a set of technologies or domains. An analogy would be a \r\nJava Library or Objective C Framework. Topologies have frameworks as dependencies.\r\n\r\n##### Resource\r\nA resource is an object used by spouts/bolts in order to externalize common state. For example, an \r\nobject which represents a technical asset in the environment/cluster such as a database or Kafka \r\nqueue. Alternatively, a resource might provide an uploaded file or container of global state. \r\nResources should be used to encapsulate functionality outside of a bolt/spout if that information \r\nis used in several places in a topology or within multiple topologies. Resources also provide a \r\nuseful mechanism for injecting parameters, connections, or state into a bolt/spout making the spout \r\nor bolt simpler, easier to write, and more testable.\r\n\r\n##### Serialization\r\n\r\n##### Topology\r\n\r\n\r\n## Find out more\r\n\r\nThe StreamFlow [Wiki](https://github.com/lmco/streamflow/wiki) is the best place to go to learn more \r\nabout the StreamFlow architecture and how to install and configure a StreamFlow server in your \r\nenvironment.\r\n\r\n[https://github.com/lmco/streamflow/wiki](https://github.com/lmco/streamflow/wiki);\r\n\r\nHere are some quick links to help get you started with StreamFlow:\r\n\r\n* [Getting Started with StreamFlow](https://github.com/lmco/streamflow/wiki/Getting-Started)\r\n* [Installing and Running StreamFlow](https://github.com/lmco/streamflow/wiki/Getting-Started#startup)\r\n* [Configuring StreamFlow](https://github.com/lmco/streamflow/wiki/Configuration)\r\n* [How Does StreamFlow Work?](https://github.com/lmco/streamflow/wiki/How-It-Works)\r\n* [Developing StreamFlow Frameworks](https://github.com/lmco/streamflow/wiki/Developing-Frameworks)\r\n\r\n\r\n## Questions or need help?\r\nComing soon...\r\n\r\n\r\n## License\r\n\r\nStreamFlow is copyright 2014 Lockheed Martin Corporation. \r\n\r\nLicensed under the **[Apache License, Version 2.0] [license]** (the \"License\");\r\nyou may not use this software except in compliance with the License.\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\nThis product incorporates open source software components covered by the terms \r\nof third party license agreements contained are contained in the /Licenses \r\nfolder of this project.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}